" Call pathogen plugin manager first
call pathogen#infect()

"
" General settings
"
set nocompatible
filetype plugin indent on

set number
set ruler
set showcmd


"" Platform
"function! MySys()
  "if has("win32")
    "return "windows"
  "else
    "return "linux"
  "endif
"endfunction

"" Always use English messages & menu
""language zh_CN.UTF-8
""language messages en_US.ISO_8859-1
""set langmenu=en_US.ISO_8859-1

"" Chinese
"" multi-encoding setting
"if has("multi_byte")
  ""set bomb 
  "set fileencodings=ucs-bom,utf-8,cp936,gb18030,big5,euc-jp,sjis,euc-kr,ucs-2le,latin1 
  "" CJK environment detection and corresponding setting 
  "if v:lang =~ "^zh_CN" 
    "" Use cp936 to support GBK, euc-cn == gb2312 
    "set encoding=chinese 
    "set termencoding=chinese 
    "set fileencoding=chinese 
  "elseif v:lang =~ "^zh_TW" 
    "" cp950, big5 or euc-tw 
    "" Are they equal to each other? 
    "set encoding=taiwan 
    "set termencoding=taiwan 
    "set fileencoding=taiwan 
  ""elseif v:lang =~ "^ko" 
  ""  " Copied from someone's dotfile, untested 
  ""  set encoding=euc-kr 
  ""  set termencoding=euc-kr 
  ""  set fileencoding=euc-kr 
  ""elseif v:lang =~ "^ja_JP" 
  ""  " Copied from someone's dotfile, untested 
  ""  set encoding=euc-jp 
  ""  set termencoding=euc-jp 
  ""  set fileencoding=euc-jp 
  "endif 
  "" Detect UTF-8 locale, and replace CJK setting if needed 
  "if v:lang =~ "utf8$" || v:lang =~ "UTF-8$" 
    "set encoding=utf-8 
    "set termencoding=utf-8 
    "set fileencoding=utf-8 
  "endif 
"endif 

""Fast saving
"nmap <silent> <leader>ww :w<cr>
"nmap <silent> <leader>wf :w!<cr>

""Fast quiting
"nmap <silent> <leader>qw :wq<cr>
"nmap <silent> <leader>qf :q!<cr>
"nmap <silent> <leader>qq :q<cr>
"nmap <silent> <leader>qa :qa<cr>


"Fast remove highlight search
nmap <silent> <leader><cr> :noh<cr>

""Fast redraw
"nmap <silent> <leader>rr :redraw!<cr>

"" Switch to buffer according to file name
"function! SwitchToBuf(filename)
    ""let fullfn = substitute(a:filename, "^\\~/", $HOME . "/", "")
    "" find in current tab
    "let bufwinnr = bufwinnr(a:filename)
    "if bufwinnr != -1
        "exec bufwinnr . "wincmd w"
        "return
    "else
        "" find in each tab
        "tabfirst
        "let tab = 1
        "while tab <= tabpagenr("$")
            "let bufwinnr = bufwinnr(a:filename)
          "if bufwinnr != -1
              "exec "normal " . tab . "gt"
              "exec bufwinnr . "wincmd w"
              "return
          "endif
          "tabnext
          "let tab = tab + 1
      "endwhile
      "" not exist, new tab
      "exec "tabnew " . a:filename
  "endif
"endfunction

""Fast edit vimrc
"if MySys() == 'linux'
  ""Fast reloading of the .vimrc
  "map <silent> <leader>ss :source ~/.vimrc<cr>
  ""Fast editing of .vimrc
  "map <silent> <leader>ee :call SwitchToBuf("~/.vimrc")<cr>
  ""When .vimrc is edited, reload it
  ""autocmd! bufwritepost .vimrc source ~/.vimrc
"elseif MySys() == 'windows'
  "" Set helplang
  "set helplang=cn
  ""Fast reloading of the _vimrc
  "map <silent> <leader>ss :source ~/_vimrc<cr>
  ""Fast editing of _vimrc
  "map <silent> <leader>ee :call SwitchToBuf("~/_vimrc")<cr>
  ""When _vimrc is edited, reload it
  "autocmd! bufwritepost _vimrc source ~/_vimrc
"endif



""Some nice mapping to switch syntax (useful if one mixes different languages in one file)
"map <leader>1 :set syntax=c<cr>
"map <leader>2 :set syntax=xhtml<cr>
"map <leader>3 :set syntax=python<cr>
"map <leader>4 :set ft=javascript<cr>
"map <leader>$ :syntax sync fromstart<cr>

"autocmd BufEnter * :syntax sync fromstart

""
"" Fileformats
""
""Favorite filetypes
"set ffs=unix,dos

"nmap <leader>fd :se ff=dos<cr>
"nmap <leader>fu :se ff=unix<cr>


""Turn on WiLd menu
"set wildmenu

""Always show current position
"set ruler

""The commandbar is 2 high
"set cmdheight=2

""Do not redraw, when running macros.. lazyredraw
"set lz

""Change buffer - without saving
""set hid

""Set backspace
"set backspace=eol,start,indent

""Bbackspace and cursor keys wrap to
""set whichwrap+=<,>,h,l
"set whichwrap+=<,>

""No sound on errors.
""set noerrorbells
""set novb t_vb=

""How many tenths of a second to blink
""set mat=2


""""""""""""""""""""""""""""""
" Visual
""""""""""""""""""""""""""""""
" From an idea by Michael Naumann
function! VisualSearch(direction) range
let l:saved_reg = @"
execute "normal! vgvy"
let l:pattern = escape(@", '\\/.*$^~[]')
let l:pattern = substitute(l:pattern, "\n$", "", "")
if a:direction == 'b'
  execute "normal ?" . l:pattern . "^M"
else
  execute "normal /" . l:pattern . "^M"
endif
let @/ = l:pattern
let @" = l:saved_reg
endfunction

"Basically you press * or # to search for the current selection !! Really useful
vnoremap <silent>* :call VisualSearch('f')<CR>
vnoremap <silent># :call VisualSearch('b')<CR>



""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
"" Moving around and tabs
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
""Map space to / and c-space to ?
""map <space> /
""map <c-space> ?

"Smart way to move btw. windows
nmap <C-j> <C-W>j
nmap <C-k> <C-W>k
nmap <C-h> <C-W>h
nmap <C-l> <C-W>l




""""""""""""""""""""""""""""""
" crefvim
""""""""""""""""""""""""""""""

"" <Leader>cr normal mode:  get help for word under cursor 
""                           Memory aid cr: (c)-(r)eference 
""  <Leader>cr visual mode:  get help for visually selected text 
""                           Memory aid cr: (c)-(r)eference 
""  <Leader>cw:              prompt for word CRefVim should search for 
""                           Memory aid cw: (c)-reference (w)hat 
""  <Leader>cc:              jump to table of contents of the C-reference manual 
""                           Memory aid cc: (c)-reference (c)ontents 


""""""""""""""""""""""""""""
"自动补齐括号等
""""""""""""""""""""""""""""
inoremap ( ()<Esc>i
inoremap [ []<Esc>i
inoremap { {<CR>}<Esc>O
autocmd Syntax html,vim inoremap < <lt>><Esc>i| inoremap > <c-r>=ClosePair('>')<CR>
inoremap ) <c-r>=ClosePair(')')<CR>
inoremap ] <c-r>=ClosePair(']')<CR>
inoremap } <c-r>=CloseBracket()<CR>
inoremap " <c-r>=QuoteDelim('"')<CR>
inoremap ' <c-r>=QuoteDelim("'")<CR>

function ClosePair(char)
 if getline('.')[col('.') - 1] == a:char
 return "\<Right>"
 else
 return a:char
 endif
endf

function CloseBracket()
 if match(getline(line('.') + 1), '\s*}') < 0
 return "\<CR>}"
 else
 return "\<Esc>j0f}a"
 endif
endf

function QuoteDelim(char)
 let line = getline('.')
 let col = col('.')
 if line[col - 2] == "\\"
 "Inserting a quoted quotation mark into the string
 return a:char
 elseif line[col - 1] == a:char
 "Escaping out of the string
 return "\<Right>"
 else
 "Starting a string
 return a:char.a:char."\<Esc>i"
 endif
endf


""""""""""""""""""""""""""""""
" indent guides
""""""""""""""""""""""""""""""
"<leader>ig
let g:indent_guides_indent_levels = 4
let g:indent_guides_guide_size = 1
let g:indent_guides_auto_colors = 0
autocmd VimEnter,Colorscheme * :hi IndentGuidesOdd  guibg=red   ctermbg=3
autocmd VimEnter,Colorscheme * :hi IndentGuidesEven guibg=green ctermbg=4

""""""""""""""""""""""""""""""
" ShowFunc
""""""""""""""""""""""""""""""
map <leader>sf  <Plug>ShowFunc 
map! <leader>sf   <Plug>ShowFunc

""""""""""""""""""""""""""""""
" tagbar
""""""""""""""""""""""""""""""
nmap <Leader>tb :TagbarToggle<CR>
let g:tagbar_ctags_bin='/usr/bin/ctags'
let g:tagbar_width=30
autocmd BufReadPost *.cpp,*.c,*.h,*.hpp,*.cc,*.cxx call tagbar#autoopen()

""""""""""""""""""""""""""""""
" showmarks setting
""""""""""""""""""""""""""""""
" Enable ShowMarks
let showmarks_enable = 1
" Show which marks
let showmarks_include = "abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ"
" Ignore help, quickfix, non-modifiable buffers
let showmarks_ignore_type = "hqm"
" Hilight lower & upper marks
let showmarks_hlline_lower = 1
let showmarks_hlline_upper = 1

"  <Leader>mt   - 打开/关闭ShowMarks插件
"  <Leader>mo   - 强制打开ShowMarks插件
"  <Leader>mh   - 清除当前行的标记
"  <Leader>ma   - 清除当前缓冲区中所有的标记
"  <Leader>mm   - 在当前行打一个标记，使用下一个可用的标记名 

""""""""""""""""""""""""""""""
" markbrowser setting
""""""""""""""""""""""""""""""
nmap <silent> <leader>mk :MarksBrowser<cr> 

"""""""""""""""""""""""""""""
" Common settings
""""""""""""""""""""""""""""
set ai                      "auto indent
set cin
set bs=2                    "delete with backspace under insert mode
set showmatch               "code match 
set laststatus=2            "always show status line
set expandtab               "the following three item setting tab and tabstop
set shiftwidth=4
set tabstop=4
set softtabstop=4
"set listchars=precedes:Â«,extends:Â»,tab:â¸Â·,trail:â,eol:Â¶
set cursorline              "add underline for where cursor stops
set autoread                "auto read file when file is write out of vim
set ignorecase              "search ignore case
set fileencodings=uft-8,gbk "open file with utf-8 OR gbk
set hls                     "highlight the matched item when search
set helplang=cn             "å¸®å©ç³»ç»è®¾ç½®ä¸ºä¸­æ
set fencs=utf-8,chinese,latin1 fenc=utf-8 enc=utf-8

autocmd FileType c,cpp  setl fdm=syntax | setl fen 
set wildmenu
"set foldmethod=syntax       " code fold
"}}




" for 256 color scheme
set t_Co=256


"
" Visual
"
set bg=dark

set t_Co=256
set background=dark
syntax on
"set colorcolumn=+1
highlight ColorColumn ctermbg=grey
highlight ColorColumn ctermfg=grey
"colorscheme darkblue 
"colorscheme inkpot 
colorscheme candycode

"
" Undo history
"
set undolevels=1000
set history=500


""""""""""""""""""""""""""""""
" tab label
""""""""""""""""""""""""""""""
set guitablabel=%N/\ %t\ %M
"map <C-c> :tabnew<CR>
map <C-n> :tabn<CR>
map <C-e> :tabe<CR>
map <C-c> :tabc<CR>


""""""""""""""""""""""""""""""
" powerline
""""""""""""""""""""""""""""""
let g:Powerline_symbols = 'fancy'


""""""""""""""""""""""""""""""
" Tag list (ctags)
""""""""""""""""""""""""""""""
let Tlist_Ctags_Cmd = '/usr/bin/ctags'
let Tlist_Show_One_File = 1        
let Tlist_Exit_OnlyWindow = 1     
let Tlist_Use_Right_Window = 1  
" let Tlist_Show_Menu=1 
" let Tlist_Auto_Open=1
nmap <silent> <leader>tl :TlistToggle<cr>
" map <silent> <Leader> tl :TlistToggle<cr>


""""""""""""""""""""""""""""""
" NERD Commenter
""""""""""""""""""""""""""""""
" nmap <silent> <unique> <leader>nc :NERDCommenterComment<cr>
" nmap <silent> <unique> <leader>nt :NERDCommenterToggle<cr>
nmap <silent> <unique> <leader>nc <Plug>NERDCommenterComment
vmap <silent> <unique> <leader>nc <Plug>NERDCommenterComment
nmap <silent> <unique> <leader>nd <Plug>NERDCommenterToggle
vmap <silent> <unique> <leader>nd <Plug>NERDCommenterToggle




""""""""""""""""""""""""""""""
" NERD Tree
""""""""""""""""""""""""""""""
let NERDChristmasTree=1
let NERDTreeAutoCenter=1
let NERDTreeBookmarksFile=$VIM.'\Data\NerdBookmarks.txt'
let NERDTreeMouseMode=2
let NERDTreeShowBookmarks=1
let NERDTreeShowFiles=1
let NERDTreeShowHidden=1
let NERDTreeShowLineNumbers=1
"let NERDTreeWinPos='left'
let NERDTreeWinPos='right'
let NERDTreeWinSize=31
" nnoremap f :NERDTreeToggle
nmap <silent> <leader>nt :NERDTreeToggle<cr>


""""""""""""""""""""""""""""""
" omni completion 
""""""""""""""""""""""""""""""
"set completeopt=longest,menu
set ofu=syntaxcomplete#Complete
imap <silent> ` <C-X><C-O>




" Enable syntax
if has("autocmd") && exists("+omnifunc")
autocmd Filetype *
      \if &omnifunc == "" |
      \  setlocal omnifunc=syntaxcomplete#Complete |
      \endif
endif



""""""""""""""""""""""""""""""
" omnicppcompletion 
""""""""""""""""""""""""""""""
" configure tags - add additional tags here or comment out not-used ones
set tags+=~/.vim/tags/cpp
" build tags of your own project with Ctrl-F12
map <C-x> :!ctags -R --sort=yes --c++-kinds=+p --fields=+iaS --extra=+q .<CR>

"0 : 禁止查找命名空间
"1 : 查找当前文件缓冲区内的命名空间(缺省)
"2 : 查找当前文件缓冲区和包含文件中的命名空间
"should set 2
let OmniCpp_NamespaceSearch = 2

"全局查找控制。0:禁止；1:允许(缺省)
let OmniCpp_GlobalScopeSearch = 1

"OmniCpp_DisplayMode : 类成员显示控制(是否显示全部公有(public)私有(private)保护(protected)成员)。
"0 : 自动
"1 : 显示所有成员
let OmniCpp_DisplayMode = 1

"OmniCpp_ShowScopeInAbbr : 选项用来控制匹配项所在域的显示位置。缺省情况下，omni显示的补全提示菜单中总是将匹配项所在域信息显示在缩略信息最后一列
let OmniCpp_ShowScopeInAbbr = 1

"是否是补全提示缩略信息中显示函数原型
"0 : 不显示(缺省)
"1 : 显示原型
let OmniCpp_ShowPrototypeInAbbr = 1
let OmniCpp_ShowAccess = 1
let OmniCpp_ShowPrototypeInAbbr = 1 " show function parameters
let OmniCpp_MayCompleteDot = 1 " autocomplete after .
let OmniCpp_MayCompleteArrow = 1 " autocomplete after ->
let OmniCpp_MayCompleteScope = 1 " autocomplete after ::
" this DefaulNamespaces setting is very important
let OmniCpp_DefaultNamespaces = ["std", "_GLIBCXX_STD", "Poco"]
" automatically open and close the popup menu / preview window
au CursorMovedI,InsertLeave * if pumvisible() == 0|silent! pclose|endif
au BufNewFile,BufRead,BufEnter *.cpp,*.hpp set omnifunc=omni#cpp#complete#Main
set completeopt=menuone,menu,longest,preview


""""""""""""""""""""""""""""""
" add file header 
""""""""""""""""""""""""""""""
"è®¾çæä»¶å¤´ï¼å¶ä¸­<Enter> = <CR>
map <C-f> ggO/*<CR>*Copyright(c) 2005-2007 Shanghai LUCENT Telecommunication Corp.<CR>*<CR>*Authored by JIANXIANG on:<Esc>:read !date <CR>kJ$a<CR>*<CR>* @desc:<CR>*<CR>* @history<CR>*/


""""""""""""""""""""""""""""""
" ccase ---deals with version control 
""""""""""""""""""""""""""""""
" :ctco
" :ctci
" :ctmk
" :ctunco
" :ctcoc
" :ctcor
" :cthist  //list the version history for the current file




""""""""""""""""""""""""""""""
" BufExplorer
""""""""""""""""""""""""""""""
let g:bufExplorerDefaultHelp=0       " Do not show default help.
let g:bufExplorerShowRelativePath=1  " Show relative paths.
let g:bufExplorerSortBy='mru'        " Sort by most recently used.
let g:bufExplorerSplitRight=0        " Split left.
let g:bufExplorerSplitVertical=1     " Split vertically.
let g:bufExplorerSplitVertSize = 30  " Split width
let g:bufExplorerUseCurrentWindow=1  " Open in new window.
autocmd BufWinEnter \[Buf\ List\] setl nonumber



""""""""""""""""""""""""""""""
" Indent
""""""""""""""""""""""""""""""
set autoindent
set smartindent
set cindent                " c style indent
set expandtab
set tabstop=2
set shiftwidth=2
"set foldmethod=indent

"
" Diff
"
set diffopt+=iwhite

"
" Search
"
set hlsearch
set incsearch

"
" Mappings
"
nnoremap <f9> "=strftime("%Y-%m-%d %H:%M")<CR>P
inoremap <f9> <C-R>=strftime("%Y-%m-%d %H:%M")<CR>
nnoremap <f10> "=strftime("%Y-%m-%d")<CR>P
inoremap <f10> <C-R>=strftime("%Y-%m-%d")<CR>
nnoremap <f11> "=strftime("%H:%M")<CR>P
inoremap <f11> <C-R>=strftime("%H:%M")<CR>

"
" cscope
"
set cscopequickfix=s-,c-,d-,i-,t-,e-
nmap <silent> <unique> <Leader>s :cs find s <c-r>=expand("<cword>")<cr><cr>
nmap <silent> <unique> <Leader>g :cs find g <c-r>=expand("<cword>")<cr><cr>
nmap <silent> <unique> <Leader>d :cs find d <c-r>=expand("<cword>")<cr><cr>
nmap <silent> <unique> <Leader>c :cs find c <c-r>=expand("<cword>")<cr><cr>
nmap <silent> <unique> <Leader>t :cs find t <c-r>=expand("<cword>")<cr><cr>
nmap <silent> <unique> <Leader>e :cs find e <c-r>=expand("<cword>")<cr><cr>
nmap <silent> <unique> <Leader>f :cs find f <c-r>=expand("<cfile>")<cr><cr>
nmap <silent> <unique> <Leader>i :cs find i <c-r>=expand("<cfile>")<cr><cr>

"
" calendar
"
let g:calendar_weeknm = 1
let g:vimwiki_use_calendar = 0
let g:calendar_diary = "/home/zhaojianxiang"
nmap <silent> <leader>da :Calendar<cr>

"
" winmanager
"
" let g:winManagerWindowLayout='TagList'
let g:winManagerWindowLayout = "BufExplorer,FileExplorer|TagList"
let g:winManagerWidth = 30
let g:defaultExplorer = 0
let g:AutoOpenWinManager = 1
" nmap <C-W><C-F> :FirstExplorerWindow<cr>
" nmap <C-W><C-B> :BottomExplorerWindow<cr>
nmap <silent> <leader>wmf :FirstExplorerWindow<cr>
nmap <silent> <leader>wmb :BottomExplorerWindow<cr>
nmap <silent> <leader>wm :WMToggle<cr>




"
" make NERD_tree stay with WinManager
"
"let g:NERDTree_title='NERD Tree'
"let g:winManagerWindowLayout='NERDTree,BufExplore|TagList'
"function! NERDTree_Start()
    "exec 'NERDTree'
"endfunction
"function! NERDTree_IsValid()
    "return 1
"endfunction
"" use wm to open
"nmap <silent> <leader>wm :WMToggle<cr>:q<cr>
""use wmc close 
"nmap <silent> <leader>wmc :WMToggle<cr>



"
" snippetMate
"
let g:snips_author='Ying YIN'



""""""""""""""""""""""""""""""
" author info
""""""""""""""""""""""""""""""
let g:vimrc_author='Jianxiang' 
let g:vimrc_email='seuzhaojx@gmail.com' 
let g:vimrc_homepage='www.vim.org' 
nmap <C-a> :AuthorInfoDetect<cr>


""""""""""""""""""""""""""""""
" mark setting
""""""""""""""""""""""""""""""
let g:mwDefaultHighlightingPalette = 'extended'
let g:mwDefaultHighlightingNum = 9
nmap <silent> <leader>hl <Plug>MarkSet
vmap <silent> <leader>hl <Plug>MarkSet
nmap <silent> <leader>hh <Plug>MarkClear
vmap <silent> <leader>hh <Plug>MarkClear
nmap <silent> <leader>hr <Plug>MarkRegex
vmap <silent> <leader>hr <Plug>MarkRegex 


"
" filelookup
"
nmap <silent> <unique> <Leader>lf <C-O><Plug>LookupFile
let g:LookupFile_TagExpr = string('/home/zhaojianxiang/poco/poco-1.4.3p1/filenametags')
"let g:LookupFile_TagExpr = string('/home/zhaojianxiang/TestTimer/os/filenametags')
"let g:LookupFile_TagExpr = string('/home/zhaojianxiang/apache/filenametags')
let g:LookupFile_MinPatLength = 2
let g:LookupFile_UsingSpecializedTags = 1
let g:LookupFile_PreserveLastPattern = 0
nmap <silent> <leader>lk :LUTags<cr>
nmap <silent> <leader>ll :LUBufs<cr>
nmap <silent> <leader>lw :LUWalk<cr>
let g:LookupFile_LookupFunc = 'LookupFile_IgnoreCaseFunc'
function! LookupFile_IgnoreCaseFunc(pattern)
    let _tags = &tags
    try
        let &tags = eval(g:LookupFile_TagExpr)
        let newpattern = '\c' . a:pattern
        let tags = taglist(newpattern)
    catch
        echohl ErrorMsg | echo "Exception: " . v:exception | echohl NONE
        return ""
    finally
        let &tags = _tags
    endtry

    " Show the matches for what is typed so far.
    let files = map(tags, 'v:val["filename"]')
    return files
endfunction

"
" DUL10 project settings
"
cs add /home/zhaojianxiang/poco/poco-1.4.3p1/Foundation
cs add /home/zhaojianxiang/poco/poco-1.4.3p1/Util
"cs add /vobs/bjtdlte/L23/tools

" CREATE TAGS FOR TestTImer
cs add /home/zhaojianxiang/TestTimer/os/source
cs add /home/zhaojianxiang/apache/httpd-2.4.2

set tags+=/home/zhaojianxiang/poco/poco-1.4.3p1/Foundation/tags
set tags+=/home/zhaojianxiang/TestTimer/os/source/tags
"set tags+=/home/zhaojianxiang/apache/httpd-2.4.2/tags



set updatetime=1000
"colo elflord
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" start commands
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" start winmanager
au VimEnter * WMToggle
" focus is in bufexplorer, switch to file
au VimEnter * call feedkeys("<C-w>l")
" maybe one of the plugins set this to nofile
au VimEnter * set buftype=""



